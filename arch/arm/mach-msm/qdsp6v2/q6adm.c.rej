--- arch/arm/mach-msm/qdsp6v2/q6adm.c	2011-07-20 10:13:21.000000000 +0400
+++ arch/arm/mach-msm/qdsp6v2/q6adm.c	2011-08-12 15:48:28.000000000 +0400
@@ -21,6 +21,7 @@
 #include <linux/jiffies.h>
 #include <asm/atomic.h>
 #include <mach/qdsp6v2/apr_audio.h>
+#include <mach/qdsp6v2/q6afe.h>
 #include "audio_acdb.h"
 
 #define TIMEOUT_MS 1000
@@ -40,12 +41,17 @@
 static int32_t adm_callback(struct apr_client_data *data, void *priv)
 {
 	uint32_t *payload;
+	int index;
 	payload = data->payload;
 	pr_debug("%s: code = 0x%x %x %x size = %d\n", __func__,
 			data->opcode, payload[0], payload[1],
 					data->payload_size);
 
 	if (data->payload_size) {
+                index = afe_get_port_index(data->token);
+                pr_debug("%s: Port ID %d, index %d\n", __func__,
+                        data->token, index);
+		
 		if (data->opcode == APR_BASIC_RSP_RESULT) {
 			switch (payload[0]) {
 			case ADM_CMD_COPP_CLOSE:
@@ -55,8 +61,7 @@
 			case ADM_CMD_MEMORY_UNMAP_REGIONS:
 			case ADM_CMD_MATRIX_MAP_ROUTINGS:
 			case ADM_CMD_SET_PARAMS:
-				atomic_set(&this_adm.copp_stat[data->token],
-									1);
+				atomic_set(&this_adm.copp_stat[index], 1);
 				wake_up(&this_adm.wait);
 				break;
 			default:
@@ -70,9 +75,8 @@
 		switch (data->opcode) {
 		case ADM_CMDRSP_COPP_OPEN: {
 			struct adm_copp_open_respond *open = data->payload;
-			atomic_set(&this_adm.copp_id[data->token],
-							open->copp_id);
-			atomic_set(&this_adm.copp_stat[data->token], 1);
+			atomic_set(&this_adm.copp_id[index],open->copp_id);
+			atomic_set(&this_adm.copp_stat[index], 1);
 			pr_debug("%s: coppid rxed=%d\n", __func__,
 							open->copp_id);
 			wake_up(&this_adm.wait);
@@ -91,6 +95,8 @@
 {
 	s32				result;
 	struct adm_set_params_command	adm_params;
+	int index = afe_get_port_index(port_id);
+
 	pr_debug("%s: Port id %d\n", __func__, port_id);
 
 	if (!aud_cal || aud_cal->cal_size == 0) {
@@ -107,13 +113,13 @@
 	adm_params.hdr.src_port = port_id;
 	adm_params.hdr.dest_svc = APR_SVC_ADM;
 	adm_params.hdr.dest_domain = APR_DOMAIN_ADSP;
-	adm_params.hdr.dest_port = atomic_read(&this_adm.copp_id[port_id]);
+	adm_params.hdr.dest_port = atomic_read(&this_adm.copp_id[index]);
 	adm_params.hdr.token = port_id;
 	adm_params.hdr.opcode = ADM_CMD_SET_PARAMS;
 	adm_params.payload = aud_cal->cal_paddr;
 	adm_params.payload_size = aud_cal->cal_size;
 
-	atomic_set(&this_adm.copp_stat[port_id], 0);
+	atomic_set(&this_adm.copp_stat[index], 0);
 	pr_debug("%s: Sending SET_PARAMS payload = 0x%x, size = %d\n",
 		__func__, adm_params.payload, adm_params.payload_size);
 	result = apr_send_pkt(this_adm.apr, (uint32_t *)&adm_params);
@@ -124,7 +130,7 @@
 	}
 	/* Wait for the callback */
 	result = wait_event_timeout(this_adm.wait,
-		atomic_read(&this_adm.copp_stat[port_id]),
+		atomic_read(&this_adm.copp_stat[index]),
 		msecs_to_jiffies(TIMEOUT_MS));
 	if (!result)
 		pr_aud_err("%s: Set params timed out port = %d, payload = 0x%x\n",
@@ -160,28 +166,29 @@
 	return;
 }
 
-int adm_open(int port_id, int session_id , int path,
-				int rate, int channel_mode,
-				int topology)
+
+int adm_open(int port_id, int path, int rate, int channel_mode, int topology)
 {
 	struct adm_copp_open_command	open;
-	struct adm_routings_command	route;
 	int ret = 0;
+        int index;
 
-	pr_debug("%s: port %d session 0x%x path:%d rate:%d mode:%d\n", __func__,
-				port_id, session_id, path, rate, channel_mode);
+        pr_debug("%s: port %d path:%d rate:%d mode:%d\n", __func__,
+                                port_id, path, rate, channel_mode);
 
-	if (port_id >= AFE_MAX_PORTS) {
-		pr_aud_err("%s port idi[%d] out of limit[%d]\n", __func__,
-						port_id, AFE_MAX_PORTS);
+        if (afe_validate_port(port_id) < 0) {
+                pr_err("%s port idi[%d] is invalid\n", __func__, port_id);
 		return -ENODEV;
 	}
 
+        index = afe_get_port_index(port_id);
+        pr_debug("%s: Port ID %d, index %d\n", __func__, port_id, index);
+
 	if (this_adm.apr == NULL) {
 		this_adm.apr = apr_register("ADSP", "ADM", adm_callback,
 						0xFFFFFFFF, &this_adm);
 		if (this_adm.apr == NULL) {
-			pr_aud_err("%s: Unable to register ADM\n", __func__);
+                        pr_err("%s: Unable to register ADM\n", __func__);
 			ret = -ENODEV;
 			return ret;
 		}
@@ -189,7 +196,7 @@
 
 
 	/* Create a COPP if port id are not enabled */
-	if (atomic_read(&this_adm.copp_cnt[port_id]) == 0) {
+        if (atomic_read(&this_adm.copp_cnt[index]) == 0) {
 
 		open.hdr.hdr_field = APR_HDR_FIELD(APR_MSG_TYPE_SEQ_CMD,
 				APR_HDR_LEN(APR_HDR_SIZE), APR_PKT_VER);
@@ -204,7 +211,7 @@
 		open.hdr.opcode = ADM_CMD_COPP_OPEN;
 
 		open.mode = path;
-		open.endpoint_id1 = port_id & 0x00FF;
+                open.endpoint_id1 = port_id;
 		open.endpoint_id2 = 0xFFFF;
 		open.topology_id  = topology;
 
@@ -216,43 +223,69 @@
 			open.endpoint_id1, open.rate,\
 			open.topology_id);
 
-		atomic_set(&this_adm.copp_stat[port_id], 0);
+                atomic_set(&this_adm.copp_stat[index], 0);
 
 		ret = apr_send_pkt(this_adm.apr, (uint32_t *)&open);
 		if (ret < 0) {
-			pr_aud_err("%s:ADM enable for port %d failed\n",
+                        pr_err("%s:ADM enable for port %d failed\n",
 						__func__, port_id);
 			ret = -EINVAL;
 			goto fail_cmd;
 		}
 		/* Wait for the callback with copp id */
 		ret = wait_event_timeout(this_adm.wait,
-			atomic_read(&this_adm.copp_stat[port_id]),
+                        atomic_read(&this_adm.copp_stat[index]),
 			msecs_to_jiffies(TIMEOUT_MS));
 		if (!ret) {
-			pr_aud_err("%s ADM open failed for port %d\n", __func__,
+                        pr_err("%s ADM open failed for port %d\n", __func__,
 								port_id);
 			ret = -EINVAL;
 			goto fail_cmd;
 		}
 	}
-	atomic_inc(&this_adm.copp_cnt[port_id]);
+        atomic_inc(&this_adm.copp_cnt[index]);
+        return 0;
+
+fail_cmd:
+
+        return ret;
+}
+
+int adm_matrix_map(int session_id, int path, int num_copps, int *port_id)
+{
+        struct adm_routings_command     route;
+        int ret = 0, i = 0;
+        /* Assumes port_ids have already been validated during adm_open */
+        int index = afe_get_port_index(port_id[0]);
+
+        pr_debug("%s: session 0x%x path:%d num_copps:%d port_id[0]:%d\n",
+                 __func__, session_id, path, num_copps, port_id[0]);
+
 	route.hdr.hdr_field = APR_HDR_FIELD(APR_MSG_TYPE_SEQ_CMD,
 				APR_HDR_LEN(APR_HDR_SIZE), APR_PKT_VER);
 	route.hdr.pkt_size = sizeof(route);
 	route.hdr.src_svc = 0;
 	route.hdr.src_domain = APR_DOMAIN_APPS;
-	route.hdr.src_port = port_id;
+        route.hdr.src_port = port_id[0];
 	route.hdr.dest_svc = APR_SVC_ADM;
 	route.hdr.dest_domain = APR_DOMAIN_ADSP;
-	route.hdr.dest_port = atomic_read(&this_adm.copp_id[port_id]);
-	route.hdr.token = port_id;
+        route.hdr.dest_port = atomic_read(&this_adm.copp_id[index]);
+        route.hdr.token = port_id[0];
 	route.hdr.opcode = ADM_CMD_MATRIX_MAP_ROUTINGS;
 	route.num_sessions = 1;
 	route.sessions[0].id = session_id;
-	route.sessions[0].num_copps = 1;
-	route.sessions[0].copp_id[0] =
-			atomic_read(&this_adm.copp_id[port_id]);
+        route.sessions[0].num_copps = num_copps;
+
+        for (i = 0; i < num_copps; i++) {
+                int tmp;
+                tmp = afe_get_port_index(port_id[i]);
+
+                pr_debug("%s: port_id[%d]: %d, index: %d\n", __func__, i,
+                         port_id[i], tmp);
+
+                route.sessions[0].copp_id[i] =
+                                        atomic_read(&this_adm.copp_id[tmp]);
+        }
 
 	switch (path) {
 	case 0x1:
@@ -263,28 +296,31 @@
 		route.path = AUDIO_TX;
 		break;
 	default:
-		pr_aud_err("%s: Wrong path set[%d]\n", __func__, path);
+                pr_err("%s: Wrong path set[%d]\n", __func__, path);
 		break;
 	}
-	atomic_set(&this_adm.copp_stat[port_id], 0);
+        atomic_set(&this_adm.copp_stat[index], 0);
 
 	ret = apr_send_pkt(this_adm.apr, (uint32_t *)&route);
 	if (ret < 0) {
-		pr_aud_err("%s: ADM routing for port %d failed\n",
-					__func__, port_id);
+                pr_err("%s: ADM routing for port %d failed\n",
+                                        __func__, port_id[0]);
 		ret = -EINVAL;
 		goto fail_cmd;
 	}
 	ret = wait_event_timeout(this_adm.wait,
-				atomic_read(&this_adm.copp_stat[port_id]),
+                                atomic_read(&this_adm.copp_stat[index]),
 				msecs_to_jiffies(TIMEOUT_MS));
 	if (!ret) {
-		pr_aud_err("%s: ADM cmd Route failed for port %d\n",
-					__func__, port_id);
+                pr_err("%s: ADM cmd Route failed for port %d\n",
+                                        __func__, port_id[0]);
 		ret = -EINVAL;
 		goto fail_cmd;
 	}
-	send_adm_cal(port_id, path);
+
+        for (i = 0; i < num_copps; i++)
+                send_adm_cal(port_id[i], path);
+
 	return 0;
 
 fail_cmd:
@@ -292,6 +328,8 @@
 	return ret;
 }
 
+
+
 int adm_memory_map_regions(uint32_t *buf_add, uint32_t mempool_id,
 				uint32_t *bufsz, uint32_t bufcnt)
 {
@@ -432,16 +470,17 @@
 	struct apr_hdr close;
 
 	int ret = 0;
+        int index = afe_get_port_index(port_id);
 
 	pr_debug("%s port_id=%d\n", __func__, port_id);
 
-	if (!(atomic_read(&this_adm.copp_cnt[port_id]))) {
+	if (!(atomic_read(&this_adm.copp_cnt[index]))) {
 		pr_aud_err("%s: copp count for port[%d]is 0\n", __func__, port_id);
 
 		goto fail_cmd;
 	}
-	atomic_dec(&this_adm.copp_cnt[port_id]);
-	if (!(atomic_read(&this_adm.copp_cnt[port_id]))) {
+	atomic_dec(&this_adm.copp_cnt[index]);
+	if (!(atomic_read(&this_adm.copp_cnt[index]))) {
 
 		close.hdr_field = APR_HDR_FIELD(APR_MSG_TYPE_SEQ_CMD,
 			APR_HDR_LEN(APR_HDR_SIZE), APR_PKT_VER);
@@ -451,19 +490,19 @@
 		close.src_port = port_id;
 		close.dest_svc = APR_SVC_ADM;
 		close.dest_domain = APR_DOMAIN_ADSP;
-		close.dest_port = atomic_read(&this_adm.copp_id[port_id]);
+		close.dest_port = atomic_read(&this_adm.copp_id[index]);
 		close.token = port_id;
 		close.opcode = ADM_CMD_COPP_CLOSE;
 
-		atomic_set(&this_adm.copp_id[port_id], 0);
-		atomic_set(&this_adm.copp_stat[port_id], 0);
+		atomic_set(&this_adm.copp_id[index], 0);
+		atomic_set(&this_adm.copp_stat[index], 0);
 
 
 		pr_debug("%s:coppid %d portid=%d coppcnt=%d\n",
 				__func__,
-				atomic_read(&this_adm.copp_id[port_id]),
+				atomic_read(&this_adm.copp_id[index]),
 				port_id,
-				atomic_read(&this_adm.copp_cnt[port_id]));
+				atomic_read(&this_adm.copp_cnt[index]));
 
 		ret = apr_send_pkt(this_adm.apr, (uint32_t *)&close);
 		if (ret < 0) {
